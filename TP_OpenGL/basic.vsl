#version 430

layout (location=1) in vec4 pos;
layout (location=2) in vec3 normal_in;

layout (location=4) uniform vec3 light;
layout (location=5) uniform vec3 cam;

out vec3 normal;
out float distance;

out vec3 EyeDirection_cameraspace;
out vec3 Position_worldspace;
out vec3 LightDirection_cameraspace;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  projection * view * model * pos;

	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (model * pos).xyz;

	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( view * model * pos).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( view * vec4(light,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	// Normal of the the vertex, in camera space
	vec3 Normal_cameraspace = ( view * model * vec4(normal_in,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

	if(dot(cam, normal_in) > 0)
	{
		normal = -normal_in;
	} else {
		normal = normal_in;
	}
	
	distance = sqrt((Position_worldspace.x-light.x)*(Position_worldspace.x-light.x)+(Position_worldspace.y-light.y)*(Position_worldspace.y-light.y)+(Position_worldspace.z-light.z)*(Position_worldspace.z-light.z));
}
